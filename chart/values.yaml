observability:
  otelcol:
    enabled: true
  jaeger:
    enabled: true
  sendTelemetry:
    enabled: true
    location: "otelcol:4317"
    locationHttp: "otelcol:4318"

default:
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)

image:
  repository: otel/demo
  pullSecrets: []

serviceAccount: ""

components:
  redis:
    enabled: true
    useDefault:
      env: true
    image: redis:alpine
    ports:
      - name: redis
        value: 6379

  adService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    podAnnotations: {}
    #  sidecar.opentelemetry.io/inject: "false"
    #  instrumentation.opentelemetry.io/inject-java: "true"
  cartService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: ASPNETCORE_URLS
        value: http://*:8080
    podAnnotations: {}
    #  sidecar.opentelemetry.io/inject: "false"
    #  instrumentation.opentelemetry.io/inject-dotnet: "true"

  checkoutService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  currencyService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: PORT
        value: "8080"
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  emailService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: APP_ENV
        value: production
      - name: PORT
        value: "8080"
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  featureflagService:
    enabled: true
    useDefault:
      env: true
    env:
      # DATABASE_URL will be automatically added to use the enabled ffsPostgres component.
      # If a different url is desired, set DATABASE_URL here.
      # - name: DATABASE_URL
      #   value:
      - name: FEATURE_FLAG_GRPC_SERVICE_PORT
        value: "50053"
      - name: FEATURE_FLAG_SERVICE_PORT
        value: "8081"
      - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
        value: grpc
    ports:
      - name: grpc
        value: 50053
      - name: http
        value: 8081
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  ffsPostgres:
    enabled: true
    useDefault:
      env: true
    env:
      - name: POSTGRES_DB
        value: ffs
      - name: POSTGRES_PASSWORD
        value: ffs
      - name: POSTGRES_USER
        value: ffs
    image: cimg/postgres:14.2
    ports:
      - name: postgres
        value: 5432
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  frontend:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    publicPort: 80
    env:
      - name: FRONTEND_ADDR
        value: :8080
    podAnnotations: {}
    needsLoadBalancer: true
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  frontendproxy:
    enabled: true
    useDefault:
      env: true
    podAnnotations: {}
    servicePort: 8080
    publicPort: 80
    # something about port 10000 too?
    env:
      # - PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - name: FRONTEND_PORT
        value: "80"
      - name: FRONTEND_HOST
        value: "{{ .Release.Name }}-frontend"
      - name: FEATURE_FLAG_SERVICE_PORT
        value: "8081"
      - name: FEATURE_FLAG_SERVICE_HOST
        value: "{{ .Release.Name }}-featureflagService"
      # - LOCUST_WEB_HOST
      # - LOCUST_WEB_PORT
      # - name: GRAFANA_SERVICE_PORT
      #   value:
      # - name: GRAFANA_SERVICE_HOST
      #   value:
      - name: JAEGER_SERVICE_PORT
        value: "16686"
      - name: JAEGER_SERVICE_HOST
        value: "{{ .Release.Name }}-jaeger"
      - name: ENVOY_PORT
        value: "8080"
      - name: ENVOY_UID
        value: "0"
    # needsLoadBalancer: true

  loadgenerator:
    enabled: true
    useDefault:
      env: true
    servicePort: 8089
    env:
      - name: LOCUST_WEB_PORT
        value: "8089"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_HOST
        value: "http://$(FRONTEND_ADDR)"
      - name: LOCUST_HEADLESS
        value: "false"
      - name: LOCUST_AUTOSTART
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-python: "true"

  paymentService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-nodejs: "true"

  productCatalogService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  recommendationService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: OTEL_PYTHON_LOG_CORRELATION
        value: "true"
      - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
        value: python
      - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
        value: "workshop-release-featureflag-service:50053"
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-python: "true"

  shippingService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: SHIPPING_SERVICE_PORT
        value: "8080"
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

  quoteService:
    enabled: true
    useDefault:
      env: true
    servicePort: 8080
    env:
      - name: OTEL_TRACES_SAMPLER
        value: "parentbased_always_on"
      - name: OTEL_TRACES_EXPORTER
        value: "otlp"
      - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
        value: "grpc"
      - name: OTEL_PHP_TRACES_PROCESSOR
        value: "simple"
    podAnnotations: {}
    #  instrumentation.opentelemetry.io/inject-sdk: "true"

opentelemetry-collector:
  nameOverride: otelcol
  mode: deployment
  ports:
    prometheus-poll:
      enabled: true
      containerPort: 9464
      servicePort: 9464
      hostPort: 9464
      protocol: TCP
  extraEnvs:
    - name: HONEYCOMB_API_KEY
      valueFrom:
        secretKeyRef:
          name: honeycomb-api-key-for-collector
          key: api-key
  config:
    exporters:
      otlp/honeycomb:
        endpoint: api.honeycomb.io:443
        headers:
          "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "metrics"
      jaeger:
        endpoint: "{{ .Release.Name }}-jaeger:14250"
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:9464"
    service:
      pipelines:
        traces:
          exporters:
            - logging
            - jaeger
            - otlp/honeycomb
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus, logging, otlp/honeycomb]
